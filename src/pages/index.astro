---
import Main from "../elm/Main.elm"
import { getSecret } from "astro:env/server"
import Layout from "../layouts/main.astro"
import { Picture } from "astro:assets"
import originalScreenshot from "../assets/original.png"

const mapboxAccessToken = getSecret("MAPBOX_ACCESS_TOKEN")
---

<Layout>
  <script src="../js/customElements.js"></script>

  <main class="mt-16 grid gap-8">
    <div class="prose my-16">
      <h1>Find in-store: map and combobox</h1>
      <p>
        The navigation widget of the <strong>Find in-store</strong> page (<a
          href="https://bellroy.com/retailers">https://bellroy.com/retailers</a
        >) uses Google Maps & <a
          href="https://developers.google.com/maps/documentation/javascript/examples/place-autocomplete-element"
          >Place Autocomplete Element</a
        > from what I can tell. Here&rsquo;s a screenshot of the original page:
      </p>
      <figure class="full">
        <Picture
          formats={["avif", "webp"]}
          src={originalScreenshot}
          alt="Screenshot of the bellroy.com Find in-store page"
        />
      </figure>
      <p>
        These solutions work well and have great UX, but I thought it would be a
        fun challenge to try a variation that incorporates some Bellroy brand
        typography and colors. I also wanted to add what felt like a small UX
        enhancement of a hover interaction to help with finding the
        corresponding map marker for a retailer in the list.
      </p>
    </div>

    <div>
      <fieldset>
        <legend>Color scheme</legend>

        <div class="flex gap-2">
          <div>
            <input
              type="radio"
              id="system"
              name="color-scheme"
              value="light dark"
              checked
            />
            <label for="system">System</label>
          </div>

          <div>
            <input type="radio" id="light" name="color-scheme" value="light" />
            <label for="light">Light</label>
          </div>

          <div>
            <input type="radio" id="dark" name="color-scheme" value="dark" />
            <label for="dark">Dark</label>
          </div>
        </div>
      </fieldset>

      <script>
        const radios = document.querySelectorAll('input[name="color-scheme"]')
        radios.forEach((radio) => {
          radio.addEventListener("change", (event) => {
            const colorScheme = (event.target as any).value
            document.documentElement.style.setProperty(
              "--color-scheme",
              colorScheme
            )
          })
        })
      </script>
    </div>

    <div
      class="w-[calc(100vw-2rem)] mx-auto font-brand-sans bg-surface shadow-lg unset-prose"
    >
      <div
        class="group-[:is(.safari)]:block hidden px-6 py-2 text-bluish-on-surface-dim"
      >
        Note: For some reason on Safari, this font appears italicized. On
        Firefox or Chrome it appears as intended.
      </div>
      <Main client:load mapboxAccessToken={mapboxAccessToken} />
    </div>

    <div class="prose mt-16 mb-32">
      <p>
        The map is implemented as a thin Elm & HTML custom element wrapper
        around Mapbox GL JS. The combobox is much more elaborate piece of work,
        way more complicated than I had anticipated. The idea was to implement
        the ARIA combobox pattern, specifically the <em
          >List autocomplete with manual selection</em
        > variant from the <a
          href="https://www.w3.org/WAI/ARIA/apg/patterns/combobox/"
          >authoring guide</a
        >. In hindsight I probably could have achieved the same with <a
          href="https://package.elm-lang.org/packages/futureworkz/elm-autocomplete"
          >futureworkz/elm-autocomplete</a
        >, and avoided some of the hacky focus management by using <code
          >aria-activedescendant</code
        >.
      </p>
    </div>

    <script>
      window.onElmInit = (elmModuleName: string, app: ElmApp) => {
        if (elmModuleName === "Main") {
          // Get the user's current position as soon as the app loads, and send it to Elm
          window.navigator.geolocation.getCurrentPosition(
            (currentPosition) => {
              app.ports?.fromJs.send?.({
                type: "CurrentPositionSuccess",
                latitude: currentPosition.coords.latitude,
                longitude: currentPosition.coords.longitude,
              })
            },
            (error) => {
              app.ports?.fromJs.send?.({
                type: "CurrentPositionError",
                error: error.message,
              })
            }
          )

          const mapboxSessionToken =
            window.sessionStorage.getItem("session_id") ??
            window.crypto.randomUUID()
          window.sessionStorage.setItem("session_id", mapboxSessionToken)
          app.ports?.fromJs.send?.({
            type: "MapboxSessionToken",
            mapboxSessionToken,
          })
        }
      }
    </script>
  </main>
</Layout>
